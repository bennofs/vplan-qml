////////////////////////////////////////////////////////////////////////////////////////////////////
/// \file
/// \brief Global haskell context.
///
/// This file defines a global haskell RTS context. When calling haskell functions via the FFI, link
/// this file. It'll take care of initializing / shutting down the RTS.
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <HsFFI.h>
#include <string>
#include <algorithm>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief A class managing the context for the haskell runtime system.
///
/// This class handles initializaton and cleanup of the haskell runtime system. 
////////////////////////////////////////////////////////////////////////////////////////////////////
class HsContext {

  private:

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Constructor. This initializes the haskell runtime system.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    HsContext() {
      int argc = 0;
      std::string name = "<vplan-qml>";
      m_argv = new char*[1];
      m_argv[0] = new char[name.length() + 1];
      std::copy(name.c_str(), name.c_str() + name.length() + 1, m_argv[0]);
      hs_init(&argc, &m_argv);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Destructor. Exits the RTS.
    ////////////////////////////////////////////////////////////////////////////////////////////////
    ~HsContext() {
      hs_exit();
    }

    
    static HsContext m_instance;
    char** m_argv;
    
};

HsContext HsContext::m_instance;
